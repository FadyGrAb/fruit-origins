name: "Test model and deploy"
run-name: "Run: ${{ github.run_id }}"
on:
  workflow_dispatch:
  push:
    branches:
      - deploy_model
    # paths:
    #   - "model-tensorflow/promoted-model/*"

jobs:
  test-deploy-model:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup environment
        run: |
          echo "Download and setup miniconda"
          wget https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-Linux-x86_64.sh
          bash Miniconda3-py310_23.3.1-0-Linux-x86_64.sh -b
          conda init
          echo "Create virutal environment"
          conda create -p ./venv python==3.6.8 -y
          echo "Installing dependencies"
          conda run -p ./venv pip install -r requirements.txt
          echo "Installing Model-Utils tool"
          conda run -p ./venv pip install ./model-tensorflow/bin/model-utils

      - name: Run model test
        run: |
          cd model-tensorflow
          conda run -p ../venv mutils test

      - name: Deploy model and upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
          MODEL_BUCKET: ${{ vars.MODEL_BUCKET }}
        run: |
          cd model-tensorflow
          mkdir converted-model
          conda run -p ../venv mutils deploy --production

      - name: Building and pushing Docker image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        run: |
          export ECR_REPO="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com"
          cp model-tensorflow/converted-model/* aws/lambda/fruitifyMeServeModel/
          cd aws/lambda/fruitifyMeServeModel
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPO
          docker build -t $ECR_REPO/fruitify-me-model:latest .
          docker push $ECR_REPO/fruitify-me-model:latest
          echo "Refreshing Lambda code:"
          aws lambda update-function-code --function-name fruitifyMeServeModel --image-uri $ECR_REPO/fruitify-me-model:latest
